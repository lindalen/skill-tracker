[{"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\index.tsx":"1","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\App.tsx":"2","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSection.tsx":"3","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSectionGrid.tsx":"4","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\Title.tsx":"5","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\Timer.tsx":"6","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\TimerButton.tsx":"7","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSettings.tsx":"8","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSettingsRevealer.tsx":"9"},{"size":230,"mtime":1610193786407,"results":"10","hashOfConfig":"11"},{"size":777,"mtime":1610617568620,"results":"12","hashOfConfig":"11"},{"size":2902,"mtime":1610809227023,"results":"13","hashOfConfig":"11"},{"size":269,"mtime":1610547855583,"results":"14","hashOfConfig":"11"},{"size":212,"mtime":1610547855623,"results":"15","hashOfConfig":"11"},{"size":1063,"mtime":1610617948055,"results":"16","hashOfConfig":"11"},{"size":1318,"mtime":1610797650446,"results":"17","hashOfConfig":"11"},{"size":1732,"mtime":1610809710684,"results":"18","hashOfConfig":"11"},{"size":578,"mtime":1610801139460,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"kdgtk6",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\index.tsx",[],["43","44"],"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\App.tsx",[],"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSection.tsx",["45","46"],"import React, {useState} from \"react\";\r\nimport \"./SkillSection.css\";\r\nimport {TimerButton} from \"./TimerButton\";\r\nimport {Timer} from \"./Timer\";\r\nimport {SkillSettings} from \"./SkillSettings\";\r\nimport {SkillSettingsRevealer} from \"./SkillSettingsRevealer\";\r\nimport { ColorResult } from \"react-color\";\r\n/**\r\n * Component Description\r\n * Data - total time spent on a skill, current timer value, goal time\r\n * Functionality - start timer, stop timer, display current timer value, display goal value\r\n * Sub-Components - Timer\r\n */\r\n\r\n/**\r\n * Planning\r\n * SkillSection\r\n- SkillName\r\n- TimerButton (hasStarted, setHasStarted, startTime, setStartTime) [also needs to swap logo on click]\r\n- ProgressBar (time, goaltime)\r\n- Timer (setTime?, time)\r\n */\r\n\r\ntype SkillSectionProps = {\r\n    skillName: string;\r\n}\r\n\r\n\r\nconst SkillSection: React.FC<SkillSectionProps> = ({skillName}) => {\r\n    const startDate = new Date(); /* ensures both current time and start time are initially the same */\r\n    const goalDate = new Date(startDate.getTime() + (25*60*1000));\r\n\r\n    const [startTime, setStartTime] = useState<Date>(startDate);\r\n    const [time, setTime] = useState<Date>(startDate);\r\n    const [active, setActive] = useState<boolean>(false);\r\n    const [msToReachGoal, setMsToReachGoal] = useState<number>(Math.abs(goalDate.getTime() - startDate.getTime()));\r\n\r\n    const [showSettings, setShowSettings] = useState<boolean>(false);\r\n    const [bgColor, setBgColor] = useState<ColorResult>({hex: '#333', rgb: {r: 51,g: 51,b: 51,a: 1,},hsl: {h: 0,s: 0,l: .20,a: 1,}});\r\n\r\n    function addSecond() {\r\n        setTime(currentTime => new Date(currentTime.getTime() + 1000));\r\n    }\r\n\r\n    function makeActiveOpposite() {\r\n        setActive(c => !c);\r\n    }\r\n\r\n    function updateSettingsVisibility() {\r\n        setShowSettings(c => !c);\r\n    }\r\n\r\n    function updateBackgroundColor(color : ColorResult) {\r\n        setBgColor(color);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"section\" style={{backgroundColor: bgColor.hex}}>\r\n            <div className=\"cell\">\r\n                <div className=\"content-grid\">\r\n                    <div className=\"cell\">\r\n                        <p className=\"title\">{skillName}</p>\r\n                    </div>\r\n                    <div className=\"cell centered\">\r\n                        <Timer time={time} startTime={startTime} msToReachGoal={msToReachGoal}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"cell\">\r\n                <TimerButton makeActiveOpposite={makeActiveOpposite} active={active} addSecond={addSecond}/>\r\n            </div>\r\n            <SkillSettingsRevealer revealFunc={updateSettingsVisibility} show={showSettings}/>\r\n            <SkillSettings show={showSettings} bgColor={bgColor.hex} handleColorChange={updateBackgroundColor}/>       \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SkillSection;","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSectionGrid.tsx",[],"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\Title.tsx",[],"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\Timer.tsx",["47"],"import React, {useEffect, useState} from 'react'\r\n\r\ninterface TimerProps {\r\n    time:Date;\r\n    startTime:Date;\r\n    msToReachGoal: number;\r\n}\r\n\r\nexport const Timer: React.FC<TimerProps> = ({time, startTime, msToReachGoal}) => {\r\n        const [currentDiff, setCurrentDiff] = useState<number>(getDateDiffInSeconds());\r\n\r\n        function getDateDiffInSeconds() {\r\n            let diff = (time.getTime() - startTime.getTime()) / 1000;\r\n            return diff;\r\n        }\r\n\r\n        function updateTimeDifference() {\r\n            setCurrentDiff(getDateDiffInSeconds());\r\n        }\r\n\r\n        useEffect(updateTimeDifference, [time]);\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                // from: https://stackoverflow.com/questions/1322732/convert-seconds-to-hh-mm-ss-with-javascript\r\n                new Date(currentDiff * 1000).toISOString().substr(11, 8)\r\n                } \r\n                / \r\n                {\r\n                    new Date(msToReachGoal).toISOString().substr(11, 8)\r\n                }\r\n            </div>\r\n        );\r\n}","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\TimerButton.tsx",["48","49"],"import React, {useState, useEffect} from 'react'\r\nimport playLogo from \"./play.png\";\r\nimport pauseLogo from \"./pause.png\";\r\nimport \"./TimerButton.css\";\r\nimport { url } from 'inspector';\r\n\r\ninterface TimerButtonProps {\r\n    makeActiveOpposite:()=>void;\r\n    active:boolean;\r\n    addSecond:()=>void;\r\n}\r\n\r\nexport const TimerButton: React.FC<TimerButtonProps> = ({makeActiveOpposite, active, addSecond}) => {\r\n        const [logoUrl, setLogoUrl] = useState(playLogo);\r\n        const [timerIntervalID, setTimerintervalID] = useState<any>(0);\r\n\r\n        function handleClick() {\r\n            if (active) {\r\n                setLogoUrl(playLogo);\r\n            } else {\r\n                setLogoUrl(pauseLogo);\r\n            }\r\n            makeActiveOpposite();\r\n        }\r\n        function handleTimer() {\r\n            if (active) {\r\n                let intervalID = setInterval(function() {addSecond();}, 1000);\r\n                setTimerintervalID(intervalID); \r\n            } else {\r\n                clearInterval(timerIntervalID);\r\n            }\r\n            \r\n            \r\n        }\r\n\r\n        useEffect(()=> {\r\n            handleTimer();\r\n        }, [active]);\r\n        return (\r\n            <button className=\"timer-button\" style={{backgroundImage: \"url(\" + logoUrl + \")\"}} onClick={handleClick}></button>\r\n        );\r\n}","D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSettings.tsx",[],"D:\\Code Projects\\GITHUB REPOS\\skill-tracker\\src\\SkillSettingsRevealer.tsx",["50"],"import React, {useState} from 'react'\r\nimport arrow from \"./reveal-arrow.png\";\r\nimport \"./SkillSettingsRevealer.css\";\r\n\r\ninterface SkillSettingsRevealerProps {\r\n    revealFunc: () => void;\r\n    show: boolean;\r\n}\r\n\r\nexport const SkillSettingsRevealer: React.FC<SkillSettingsRevealerProps> = ({revealFunc, show}) => {\r\n\r\n        let transformVal = show ? \"scale(-1)\" : \"scale(1)\";\r\n        return (\r\n            \r\n            <button className=\"settings-button\" style={{backgroundImage: \"url(\" + arrow + \")\", transform: transformVal}} onClick={revealFunc}></button>\r\n        );\r\n}",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":33,"column":23,"nodeType":"57","messageId":"58","endLine":33,"endColumn":35},{"ruleId":"55","severity":1,"message":"59","line":36,"column":27,"nodeType":"57","messageId":"58","endLine":36,"endColumn":43},{"ruleId":"60","severity":1,"message":"61","line":21,"column":41,"nodeType":"62","endLine":21,"endColumn":47,"suggestions":"63"},{"ruleId":"55","severity":1,"message":"64","line":5,"column":10,"nodeType":"57","messageId":"58","endLine":5,"endColumn":13},{"ruleId":"60","severity":1,"message":"65","line":38,"column":12,"nodeType":"62","endLine":38,"endColumn":20,"suggestions":"66"},{"ruleId":"55","severity":1,"message":"67","line":1,"column":16,"nodeType":"57","messageId":"58","endLine":1,"endColumn":24},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"@typescript-eslint/no-unused-vars","'setStartTime' is assigned a value but never used.","Identifier","unusedVar","'setMsToReachGoal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDateDiffInSeconds'. Either include it or remove the dependency array.","ArrayExpression",["70"],"'url' is defined but never used.","React Hook useEffect has a missing dependency: 'handleTimer'. Either include it or remove the dependency array.",["71"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [getDateDiffInSeconds, time]",{"range":"76","text":"77"},"Update the dependencies array to be: [active, handleTimer]",{"range":"78","text":"79"},[623,629],"[getDateDiffInSeconds, time]",[1147,1155],"[active, handleTimer]"]